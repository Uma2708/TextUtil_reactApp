{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForms.js","App.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Alert","props","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","concat","mode","Link","to","title","aria-label","aria-current","aria-checked","toggleMode","htmlFor","TextForms","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","showAlert","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","console","log","split","join","length","App","setMode","setAlert","message","setTimeout","BrowserRouter","body","Switch","Route","exact","path","component","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.ecc93605.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const[myStyle,setMyStyle] = useState({\r\n        color:'white',\r\n        backgroundColor:'black'\r\n    })\r\n    \r\n    const[btntext, setBtnText] = useState(\"Enable Light Mode\");\r\n\r\n   const  toggleStyle=()=>{\r\n        if(myStyle.color ==='white'){\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"container\" style={myStyle} >\r\n        <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\" >\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body \" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container my-3\">\r\n    <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext}</button>\r\n</div>\r\n    </div>\r\n        \r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n     props.alert && <div className={`alert alert-warning alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg  navbar-${props.mode} bg-${props.mode} `}>\r\n    <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li>\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode===`light`?`dark`:`light`}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" aria-checked=\"false\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\n// Navbar.protoTypes ={\r\n//     title: protoTypes.string,\r\n//     aboutText: protoTypes.string\r\n// }\r\n\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForms(props) {\r\n    const handleUpClick=()=>{\r\n        // console.log(\"uppercase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"changed to uppercase \",\"sucess\");\r\n    }\r\n    const handleClearClick=()=>{\r\n        // console.log(\"uppercase was clicked\");\r\n        let newText=\"\";\r\n        setText(newText);\r\n    }\r\n    const handleLoClick=()=>{\r\n        // console.log(\"uppercase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"changed to lowercase \",\"sucess\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        // console.log(\"on change\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        console.log(text);\r\n    }\r\n\r\n    const handleRemoveSpace =()=>{ \r\n        var newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n}\r\n\r\n\r\n    const[text, setText] = useState('Enter text here');\r\n    // setText(\"new text\");\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n    <h2>{props.heading}</h2>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n    <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleRemoveSpace}>Remove Extra Space</button>\r\n    </div>\r\n\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your text sum </h2>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\" \").length}Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here \"}</p>\r\n        <h2>Sentences </h2>\r\n        <p>{text.split(\". \").length}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForms from './components/TextForms';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode]=useState('light');\n  const[alert, setAlert]= useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Dark mode enabled\", \"success\");\n    }\n  }\n\n return ( \n    <BrowserRouter>\n      <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n    \n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path=\"/\">\n            <TextForms showAlert={showAlert} heading=\"Enter the text to analyze \" mode={mode} />\n          </Route>\n          <Route exact path=\"/about\" component={About}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n// import { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n\n    <App />\n  \n  \n);\n\n"],"sourceRoot":""}